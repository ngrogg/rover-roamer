// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Win
#include <Win.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c93a8b5473d4790_15_new,"Win","new",0x9213aeee,"Win.new","Win.hx",15,0x86f80842)
HX_LOCAL_STACK_FRAME(_hx_pos_7c93a8b5473d4790_21_update,"Win","update",0x71e0b43b,"Win.update","Win.hx",21,0x86f80842)

void Win_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7c93a8b5473d4790_15_new)
HXLINE(  16)		super::__construct((((Float)::flixel::FlxG_obj::width / (Float)(int)2) + (int)300),(int)1,null());
HXLINE(  17)		this->loadGraphic(HX_("assets/win.png",8b,0a,1b,a3),null(),null(),null(),null(),null());
HXLINE(  18)		this->updateHitbox();
            	}

Dynamic Win_obj::__CreateEmpty() { return new Win_obj; }

void *Win_obj::_hx_vtable = 0;

Dynamic Win_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Win_obj > _hx_result = new Win_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Win_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x00425ffc) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x00425ffc;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Win_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7c93a8b5473d4790_21_update)
HXLINE(  23)		this->velocity->set_x((int)-125);
HXLINE(  24)		this->velocity->set_y((int)0);
HXLINE(  25)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Win_obj > Win_obj::__new() {
	hx::ObjectPtr< Win_obj > __this = new Win_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Win_obj > Win_obj::__alloc(hx::Ctx *_hx_ctx) {
	Win_obj *__this = (Win_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Win_obj), true, "Win"));
	*(void **)__this = Win_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Win_obj::Win_obj()
{
}

hx::Val Win_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Win_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Win_obj_sStaticStorageInfo = 0;
#endif

static ::String Win_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Win_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Win_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Win_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Win_obj::__mClass,"__mClass");
};

#endif

hx::Class Win_obj::__mClass;

void Win_obj::__register()
{
	hx::Object *dummy = new Win_obj;
	Win_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Win","\xfc","\x5f","\x42","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Win_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Win_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Win_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Win_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Win_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Win_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

