// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_FailState
#include <FailState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d49b122547d46524_9_new,"FailState","new",0xaf2c3da5,"FailState.new","FailState.hx",9,0xe415fd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_d49b122547d46524_12_create,"FailState","create",0xde14d2d7,"FailState.create","FailState.hx",12,0xe415fd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_d49b122547d46524_45_update,"FailState","update",0xe90af1e4,"FailState.update","FailState.hx",45,0xe415fd6b)

void FailState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_d49b122547d46524_9_new)
HXDLIN(   9)		super::__construct(MaxSize);
            	}

Dynamic FailState_obj::__CreateEmpty() { return new FailState_obj; }

void *FailState_obj::_hx_vtable = 0;

Dynamic FailState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FailState_obj > _hx_result = new FailState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FailState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x05760087) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x05760087;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void FailState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_d49b122547d46524_12_create)
HXLINE(  15)		 ::flixel::text::FlxText t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,HX_("UH OH! Try Again...",f8,ec,ac,65),null(),null());
HXLINE(  18)		t->setFormat(null(),(int)32,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  19)		this->add(t);
HXLINE(  21)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)40,::flixel::FlxG_obj::width,HX_("Use Left and Right to speed up and slow down",84,62,68,ce),null(),null());
HXLINE(  22)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  23)		this->add(t);
HXLINE(  25)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)60,::flixel::FlxG_obj::width,HX_("A and D are also usable",61,79,97,b2),null(),null());
HXLINE(  26)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  27)		this->add(t);
HXLINE(  29)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)80,::flixel::FlxG_obj::width,HX_("Game ends if you hit an obstacle",6b,78,c9,c0),null(),null());
HXLINE(  30)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  31)		this->add(t);
HXLINE(  33)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)100,::flixel::FlxG_obj::width,HX_("Reach the checkered flag to win",a3,69,50,33),null(),null());
HXLINE(  34)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  35)		this->add(t);
HXLINE(  37)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)460,::flixel::FlxG_obj::width,HX_("Press E to return to menu",21,8c,36,22),null(),null());
HXLINE(  38)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  39)		this->add(t);
            	}


void FailState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_d49b122547d46524_45_update)
HXDLIN(  45)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  45)		if (_this->keyManager->checkStatus((int)69,_this->status)) {
HXLINE(  47)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN(  47)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  47)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}



hx::ObjectPtr< FailState_obj > FailState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< FailState_obj > __this = new FailState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< FailState_obj > FailState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	FailState_obj *__this = (FailState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FailState_obj), true, "FailState"));
	*(void **)__this = FailState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

FailState_obj::FailState_obj()
{
}

hx::Val FailState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FailState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FailState_obj_sStaticStorageInfo = 0;
#endif

static ::String FailState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FailState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FailState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FailState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FailState_obj::__mClass,"__mClass");
};

#endif

hx::Class FailState_obj::__mClass;

void FailState_obj::__register()
{
	hx::Object *dummy = new FailState_obj;
	FailState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("FailState","\x33","\x87","\x31","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FailState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FailState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FailState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FailState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FailState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FailState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

