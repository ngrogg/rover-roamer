// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_WinState
#include <WinState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d218b6a33df93d7a_10_new,"WinState","new",0x8ba493e7,"WinState.new","WinState.hx",10,0x86f0a569)
HX_LOCAL_STACK_FRAME(_hx_pos_d218b6a33df93d7a_16_create,"WinState","create",0x209651d5,"WinState.create","WinState.hx",16,0x86f0a569)
HX_LOCAL_STACK_FRAME(_hx_pos_d218b6a33df93d7a_38_update,"WinState","update",0x2b8c70e2,"WinState.update","WinState.hx",38,0x86f0a569)

void WinState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_d218b6a33df93d7a_10_new)
HXDLIN(  10)		super::__construct(MaxSize);
            	}

Dynamic WinState_obj::__CreateEmpty() { return new WinState_obj; }

void *WinState_obj::_hx_vtable = 0;

Dynamic WinState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WinState_obj > _hx_result = new WinState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WinState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x5d871d3d;
	}
}

void WinState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_d218b6a33df93d7a_16_create)
HXLINE(  19)		 ::flixel::text::FlxText t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,HX_("CONGRATULATIONS!",cc,d3,6f,0b),null(),null());
HXLINE(  21)		t->setFormat(null(),(int)32,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  22)		this->add(t);
HXLINE(  25)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)40,::flixel::FlxG_obj::width,HX_("YOU WIN!!!",06,59,c6,27),null(),null());
HXLINE(  26)		t->setFormat(null(),(int)24,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  27)		this->add(t);
HXLINE(  30)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)440,::flixel::FlxG_obj::width,HX_("Press Q to return to menu",2d,7f,d3,5e),null(),null());
HXLINE(  31)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  32)		this->add(t);
            	}


void WinState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_d218b6a33df93d7a_38_update)
HXDLIN(  38)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  38)		if (_this->keyManager->checkStatus((int)81,_this->status)) {
HXLINE(  40)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN(  40)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  40)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}



hx::ObjectPtr< WinState_obj > WinState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< WinState_obj > __this = new WinState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< WinState_obj > WinState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	WinState_obj *__this = (WinState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WinState_obj), true, "WinState"));
	*(void **)__this = WinState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

WinState_obj::WinState_obj()
{
}

hx::Val WinState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *WinState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *WinState_obj_sStaticStorageInfo = 0;
#endif

static ::String WinState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void WinState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WinState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WinState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WinState_obj::__mClass,"__mClass");
};

#endif

hx::Class WinState_obj::__mClass;

void WinState_obj::__register()
{
	hx::Object *dummy = new WinState_obj;
	WinState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("WinState","\x75","\x14","\xed","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WinState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WinState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WinState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WinState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WinState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WinState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

