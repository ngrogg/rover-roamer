// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_FailState
#include <FailState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_Obstacles
#include <Obstacles.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Win
#include <Win.h>
#endif
#ifndef INCLUDED_WinState
#include <WinState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxStarField2D
#include <flixel/addons/display/FlxStarField2D.h>
#endif
#ifndef INCLUDED_flixel_addons_display__FlxStarField_FlxStarField
#include <flixel/addons/display/_FlxStarField/FlxStarField.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_14_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",14,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_34_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",34,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_74_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",74,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_93_resetTimer,"PlayState","resetTimer",0x84ea6ce7,"PlayState.resetTimer","PlayState.hx",93,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_113_winTimer,"PlayState","winTimer",0xf229293a,"PlayState.winTimer","PlayState.hx",113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_126_spawnObstacle,"PlayState","spawnObstacle",0x3f1f3ed9,"PlayState.spawnObstacle","PlayState.hx",126,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_125_spawnObstacle,"PlayState","spawnObstacle",0x3f1f3ed9,"PlayState.spawnObstacle","PlayState.hx",125,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_131_spawnWin,"PlayState","spawnWin",0x28159fd2,"PlayState.spawnWin","PlayState.hx",131,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_137_obstacleHitsPlayer,"PlayState","obstacleHitsPlayer",0xddd987e1,"PlayState.obstacleHitsPlayer","PlayState.hx",137,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_146_winHitsPlayer,"PlayState","winHitsPlayer",0x166360ac,"PlayState.winHitsPlayer","PlayState.hx",146,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_31_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",31,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_14_new)
HXDLIN(  14)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_34_create)
HXLINE(  35)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  38)		this->add( ::flixel::addons::display::FlxStarField2D_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null()));
HXLINE(  41)		::PlayState_obj::_background->set_x((int)0);
HXLINE(  42)		::PlayState_obj::_background->set_y((int)0);
HXLINE(  43)		::PlayState_obj::_background->loadGraphic(HX_("assets/levelBackgroundWide.png",b4,12,b9,f2),null(),null(),null(),null(),null());
HXLINE(  44)		this->add(::PlayState_obj::_background);
HXLINE(  48)		this->_player =  ::Player_obj::__alloc( HX_CTX );
HXLINE(  49)		this->add(this->_player);
HXLINE(  52)		::PlayState_obj::obstacles =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  53)		this->add(::PlayState_obj::obstacles);
HXLINE(  55)		this->victory =  ::Win_obj::__alloc( HX_CTX );
HXLINE(  58)		this->count = (int)0;
HXLINE(  61)		this->resetTimer( ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null()));
HXLINE(  62)		this->winTimer( ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null()));
HXLINE(  65)		 ::flixel::text::FlxText t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)460,::flixel::FlxG_obj::width,HX_("Q to quit game",2d,d0,e6,66),null(),null());
HXLINE(  67)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  68)		this->add(t);
HXLINE(  70)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_74_update)
HXLINE(  76)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  76)		if (_this->keyManager->checkStatus((int)81,_this->status)) {
HXLINE(  78)			this->remove(::PlayState_obj::_background,null());
HXLINE(  79)			{
HXLINE(  79)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN(  79)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  79)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE(  83)		::PlayState_obj::_background->velocity->set_x((int)-20);
HXLINE(  85)		this->super::update(elapsed);
HXLINE(  88)		::flixel::FlxG_obj::overlap(::PlayState_obj::obstacles,this->_player,this->obstacleHitsPlayer_dyn(),null());
HXLINE(  89)		::flixel::FlxG_obj::overlap(this->victory,this->_player,this->winHitsPlayer_dyn(),null());
            	}


void PlayState_obj::resetTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_93_resetTimer)
HXLINE(  94)		if ((::MenuState_obj::Difficulty == (int)1)) {
HXLINE(  96)			Timer->start((int)2,this->resetTimer_dyn(),null());
            		}
HXLINE(  99)		if ((::MenuState_obj::Difficulty == (int)2)) {
HXLINE( 101)			Timer->start((int)1,this->resetTimer_dyn(),null());
            		}
HXLINE( 105)		if ((::MenuState_obj::Difficulty == (int)3)) {
HXLINE( 107)			Timer->start(((Float).5),this->resetTimer_dyn(),null());
            		}
HXLINE( 109)		this->spawnObstacle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,resetTimer,(void))

void PlayState_obj::winTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_113_winTimer)
HXLINE( 115)		this->count = (this->count + (int)1);
HXLINE( 117)		Timer->start((int)30,this->winTimer_dyn(),null());
HXLINE( 118)		if ((this->count == (int)2)) {
HXLINE( 120)			this->spawnWin();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,winTimer,(void))

void PlayState_obj::spawnObstacle(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Obstacles _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_126_spawnObstacle)
HXLINE( 126)			return  ::Obstacles_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_125_spawnObstacle)
HXLINE( 126)		 ::Obstacles obstacles = ::PlayState_obj::obstacles->recycle(null(), ::Dynamic(new _hx_Closure_0()),null(),null()).StaticCast<  ::Obstacles >();
HXLINE( 127)		obstacles->init(null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,spawnObstacle,(void))

void PlayState_obj::spawnWin(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_131_spawnWin)
HXLINE( 132)		this->victory =  ::Win_obj::__alloc( HX_CTX );
HXLINE( 133)		this->add(this->victory);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,spawnWin,(void))

void PlayState_obj::obstacleHitsPlayer( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_137_obstacleHitsPlayer)
HXLINE( 138)		Object1->kill();
HXLINE( 139)		Object2->kill();
HXLINE( 140)		this->remove(::PlayState_obj::_background,null());
HXLINE( 141)		{
HXLINE( 141)			 ::flixel::FlxState nextState =  ::FailState_obj::__alloc( HX_CTX ,null());
HXDLIN( 141)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 141)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,obstacleHitsPlayer,(void))

void PlayState_obj::winHitsPlayer( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_146_winHitsPlayer)
HXLINE( 147)		Object1->kill();
HXLINE( 148)		Object2->kill();
HXLINE( 149)		this->remove(::PlayState_obj::_background,null());
HXLINE( 150)		{
HXLINE( 150)			 ::flixel::FlxState nextState =  ::WinState_obj::__alloc( HX_CTX ,null());
HXDLIN( 150)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 150)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,winHitsPlayer,(void))

 ::flixel::group::FlxTypedGroup PlayState_obj::obstacles;

 ::flixel::FlxSprite PlayState_obj::_background;


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(victory,"victory");
	HX_MARK_MEMBER_NAME(_player,"_player");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(victory,"victory");
	HX_VISIT_MEMBER_NAME(_player,"_player");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"victory") ) { return hx::Val( victory ); }
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"winTimer") ) { return hx::Val( winTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnWin") ) { return hx::Val( spawnWin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resetTimer") ) { return hx::Val( resetTimer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"spawnObstacle") ) { return hx::Val( spawnObstacle_dyn() ); }
		if (HX_FIELD_EQ(inName,"winHitsPlayer") ) { return hx::Val( winHitsPlayer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"obstacleHitsPlayer") ) { return hx::Val( obstacleHitsPlayer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"obstacles") ) { outValue = ( obstacles ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { outValue = ( _background ); return true; }
	}
	return false;
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"victory") ) { victory=inValue.Cast<  ::Win >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"obstacles") ) { obstacles=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { _background=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"));
	outFields->push(HX_HCSTRING("victory","\xd2","\x6b","\x0a","\x74"));
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PlayState_obj,count),HX_HCSTRING("count","\xcf","\x44","\x63","\x4a")},
	{hx::fsObject /*::Win*/ ,(int)offsetof(PlayState_obj,victory),HX_HCSTRING("victory","\xd2","\x6b","\x0a","\x74")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(void *) &PlayState_obj::obstacles,HX_HCSTRING("obstacles","\x44","\x1b","\x27","\x87")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(void *) &PlayState_obj::_background,HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("victory","\xd2","\x6b","\x0a","\x74"),
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("resetTimer","\x76","\xf7","\xd1","\xf8"),
	HX_HCSTRING("winTimer","\x09","\xa2","\x65","\x43"),
	HX_HCSTRING("spawnObstacle","\xaa","\x77","\x8f","\x8b"),
	HX_HCSTRING("spawnWin","\xa1","\x18","\x52","\x79"),
	HX_HCSTRING("obstacleHitsPlayer","\x70","\xb9","\x34","\x08"),
	HX_HCSTRING("winHitsPlayer","\x7d","\x99","\xd3","\x62"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PlayState_obj::obstacles,"obstacles");
	HX_MARK_MEMBER_NAME(PlayState_obj::_background,"_background");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PlayState_obj::obstacles,"obstacles");
	HX_VISIT_MEMBER_NAME(PlayState_obj::_background,"_background");
};

#endif

hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_HCSTRING("obstacles","\x44","\x1b","\x27","\x87"),
	HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"),
	::String(null())
};

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_31_boot)
HXDLIN(  31)		_background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)1280,(int)480,null());
            	}
}

