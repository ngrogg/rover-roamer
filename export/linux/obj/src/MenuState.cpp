// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_9_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",9,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_17_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",17,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_57_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",57,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_9_new)
HXDLIN(   9)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x17fb3926) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17fb3926;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_17_create)
HXLINE(  20)		 ::flixel::text::FlxText t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,HX_("Rover Roamer",f0,b0,a7,69),null(),null());
HXLINE(  24)		t->setFormat(null(),(int)32,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  25)		this->add(t);
HXLINE(  27)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)40,::flixel::FlxG_obj::width,HX_("Use Left and Right to speed up and slow down",84,62,68,ce),null(),null());
HXLINE(  28)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  29)		this->add(t);
HXLINE(  31)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)60,::flixel::FlxG_obj::width,HX_("A and D are also usable",61,79,97,b2),null(),null());
HXLINE(  32)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  33)		this->add(t);
HXLINE(  35)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)80,::flixel::FlxG_obj::width,HX_("Hold Space to fly, you fall when you let go!",94,b7,dd,65),null(),null());
HXLINE(  36)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  37)		this->add(t);
HXLINE(  39)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)100,::flixel::FlxG_obj::width,HX_("Game ends if you hit an obstacle",6b,78,c9,c0),null(),null());
HXLINE(  40)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  41)		this->add(t);
HXLINE(  43)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)120,::flixel::FlxG_obj::width,HX_("Reach the checkered flag to win",a3,69,50,33),null(),null());
HXLINE(  44)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  45)		this->add(t);
HXLINE(  47)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)440,::flixel::FlxG_obj::width,HX_("Difficulty:",7f,bd,28,39),null(),null());
HXLINE(  48)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  49)		this->add(t);
HXLINE(  51)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)460,::flixel::FlxG_obj::width,HX_("E, M, or H for easy, medium or hard game",5b,cc,05,1e),null(),null());
HXLINE(  52)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  53)		this->add(t);
            	}


void MenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_57_update)
HXLINE(  60)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  60)		if (_this->keyManager->checkStatus((int)69,_this->status)) {
HXLINE(  62)			::MenuState_obj::Difficulty = (int)1;
HXLINE(  63)			{
HXLINE(  63)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  63)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  63)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE(  67)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  67)		if (_this1->keyManager->checkStatus((int)77,_this1->status)) {
HXLINE(  69)			::MenuState_obj::Difficulty = (int)2;
HXLINE(  70)			{
HXLINE(  70)				 ::flixel::FlxState nextState1 =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  70)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(  70)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
            		}
HXLINE(  73)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  73)		if (_this2->keyManager->checkStatus((int)72,_this2->status)) {
HXLINE(  75)			::MenuState_obj::Difficulty = (int)3;
HXLINE(  76)			{
HXLINE(  76)				 ::flixel::FlxState nextState2 =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  76)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState2)) {
HXLINE(  76)					::flixel::FlxG_obj::game->_requestedState = nextState2;
            				}
            			}
            		}
            	}


int MenuState_obj::Difficulty;


hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

hx::Val MenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"Difficulty") ) { outValue = ( Difficulty ); return true; }
	}
	return false;
}

bool MenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"Difficulty") ) { Difficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MenuState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo MenuState_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &MenuState_obj::Difficulty,HX_HCSTRING("Difficulty","\x5b","\x52","\x3f","\x3e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MenuState_obj::Difficulty,"Difficulty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MenuState_obj::Difficulty,"Difficulty");
};

#endif

hx::Class MenuState_obj::__mClass;

static ::String MenuState_obj_sStaticFields[] = {
	HX_HCSTRING("Difficulty","\x5b","\x52","\x3f","\x3e"),
	::String(null())
};

void MenuState_obj::__register()
{
	hx::Object *dummy = new MenuState_obj;
	MenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MenuState","\xd2","\xbf","\xb6","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MenuState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

