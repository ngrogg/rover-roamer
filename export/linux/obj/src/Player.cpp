// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_16_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",16,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_24_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",24,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)39,(int)68,
};

void Player_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_16_new)
HXLINE(  17)		super::__construct((((Float)::flixel::FlxG_obj::width / (Float)(int)2) - (int)300),(int)356,null());
HXLINE(  18)		this->loadGraphic(HX_("assets/rover.png",35,e7,25,67),null(),null(),null(),null(),null());
HXLINE(  19)		this->setGraphicSize((int)20,(int)20);
HXLINE(  20)		this->updateHitbox();
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_24_update)
HXLINE(  26)		this->velocity->set_x((int)0);
HXLINE(  27)		this->velocity->set_y((int)0);
HXLINE(  30)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,2),(int)1)) {
HXLINE(  32)			 ::flixel::math::FlxPoint _g = this->velocity;
HXDLIN(  32)			_g->set_x((_g->x - (int)250));
            		}
HXLINE(  36)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,2),(int)1)) {
HXLINE(  38)			 ::flixel::math::FlxPoint _g1 = this->velocity;
HXDLIN(  38)			_g1->set_x((_g1->x + (int)250));
            		}
HXLINE(  43)		bool _hx_tmp;
HXDLIN(  43)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  43)		if (_this->keyManager->checkStatus((int)32,_this->status)) {
HXLINE(  43)			if ((this->y >= (int)200)) {
HXLINE(  43)				_hx_tmp = (this->y <= (int)356);
            			}
            			else {
HXLINE(  43)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  43)			_hx_tmp = false;
            		}
HXDLIN(  43)		if (_hx_tmp) {
HXLINE(  45)			 ::flixel::math::FlxPoint _g2 = this->velocity;
HXDLIN(  45)			_g2->set_y((_g2->y - (int)250));
            		}
HXLINE(  48)		bool _hx_tmp1;
HXDLIN(  48)		if (::flixel::FlxG_obj::keys->checkStatus((int)32,(int)0)) {
HXLINE(  48)			_hx_tmp1 = (this->y <= (int)356);
            		}
            		else {
HXLINE(  48)			_hx_tmp1 = false;
            		}
HXDLIN(  48)		if (_hx_tmp1) {
HXLINE(  50)			 ::flixel::math::FlxPoint _g3 = this->velocity;
HXDLIN(  50)			_g3->set_y((_g3->y + (int)150));
            		}
HXLINE(  53)		this->super::update(elapsed);
HXLINE(  56)		Float _hx_tmp2 = this->x;
HXDLIN(  56)		int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  56)		if ((_hx_tmp2 > ((_hx_tmp3 - this->get_width()) - (int)20))) {
HXLINE(  58)			int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN(  58)			this->set_x(((_hx_tmp4 - this->get_width()) - (int)20));
            		}
HXLINE(  61)		if ((this->x < (int)4)) {
HXLINE(  63)			this->set_x((int)4);
            		}
HXLINE(  65)		if ((this->y > (int)356)) {
HXLINE(  67)			this->set_y((int)356);
            		}
HXLINE(  69)		if ((this->y < (int)4)) {
HXLINE(  71)			this->set_y((int)4);
            		}
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Player_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

